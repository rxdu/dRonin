/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/rdu/Workspace/dronin/dRonin/flight/UAVCAN/pixcar/25004.CarRawSpeed.uavcan
 */

#ifndef PIXCAR_CARRAWSPEED_HPP_INCLUDED
#define PIXCAR_CARRAWSPEED_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
# 4-byte float
float32 speed
******************************************************************************/

/********************* DSDL signature source definition ***********************
pixcar.CarRawSpeed
saturated float32 speed
******************************************************************************/

#undef speed

namespace pixcar
{

template <int _tmpl>
struct UAVCAN_EXPORT CarRawSpeed_
{
    typedef const CarRawSpeed_<_tmpl>& ParameterType;
    typedef CarRawSpeed_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::FloatSpec< 32, ::uavcan::CastModeSaturate > speed;
    };

    enum
    {
        MinBitLen
            = FieldTypes::speed::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::speed::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::speed >::Type speed;

    CarRawSpeed_()
        : speed()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<32 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 25004 };

    static const char* getDataTypeFullName()
    {
        return "pixcar.CarRawSpeed";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool CarRawSpeed_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        speed == rhs.speed;
}

template <int _tmpl>
bool CarRawSpeed_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(speed, rhs.speed);
}

template <int _tmpl>
int CarRawSpeed_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::speed::encode(self.speed, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int CarRawSpeed_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::speed::decode(self.speed, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature CarRawSpeed_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xF12D95E3FF243D25ULL);

    FieldTypes::speed::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef CarRawSpeed_<0> CarRawSpeed;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::pixcar::CarRawSpeed > _uavcan_gdtr_registrator_CarRawSpeed;

}

} // Namespace pixcar

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::pixcar::CarRawSpeed >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::pixcar::CarRawSpeed::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::pixcar::CarRawSpeed >::stream(Stream& s, ::pixcar::CarRawSpeed::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "speed: ";
    YamlStreamer< ::pixcar::CarRawSpeed::FieldTypes::speed >::stream(s, obj.speed, level + 1);
}

}

namespace pixcar
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::pixcar::CarRawSpeed::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::pixcar::CarRawSpeed >::stream(s, obj, 0);
    return s;
}

} // Namespace pixcar

#endif // PIXCAR_CARRAWSPEED_HPP_INCLUDED